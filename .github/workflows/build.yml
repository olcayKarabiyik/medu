name: Build + Publish

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

env:
  BASE_DEV_VERSION: 1.0.0

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
    - uses: actions/checkout@v4

    - name: Set Build Variables
      run: |
        if [[ "$GITHUB_REF" =~ ^refs/tags/v* ]]; then
          echo "Using TAG mode: $GITHUB_REF_NAME"
          echo "REL_VERSION=$GITHUB_REF_NAME" >> $GITHUB_ENV
          echo "REL_VERSION_STRICT=${GITHUB_REF_NAME#?}" >> $GITHUB_ENV
        else
          echo "Using BRANCH mode: v$BASE_DEV_VERSION-dev.$GITHUB_RUN_NUMBER"
          echo "REL_VERSION=v$BASE_DEV_VERSION-dev.$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
          echo "REL_VERSION_STRICT=$BASE_DEV_VERSION-dev.$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
        fi

    - name: Disable DEV Flag + Set Version
      run: |
        sudo apt-get update
        sudo apt-get install jq -y
        mv package.json pkg-temp.json
        jq --arg vs "$REL_VERSION_STRICT" -r '. + {dev:false, version:$vs}' pkg-temp.json > package.json
        rm pkg-temp.json
        cat package.json

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install docker-compose -y
        echo "Working Directory: ${PWD}"

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker images
      run: |
        docker-compose -f dev/build/docker-compose.yml build
        docker-compose -f dev/build/docker-compose.yml push

  beta:
    name: Publish Beta Images
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build]
    permissions:
      packages: write

    steps:
    - name: Set Version Variables
      run: |
        echo "Using TAG mode: $GITHUB_REF_NAME"
        echo "REL_VERSION_STRICT=${GITHUB_REF_NAME#?}" >> $GITHUB_ENV

  release:
    name: Publish Release Images
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    # TODO: github'ta settings > environments bölümünden prod environmenti oluşturulacak
    # bunun için önce github pro'ya geçilmesi gerekiyor
    environment: prod
    needs: [beta]
    permissions:
      packages: write
      contents: write

    steps:
    - name: Set Version Variables
      run: |
        echo "Using TAG mode: $GITHUB_REF_NAME"
        echo "REL_VERSION_STRICT=${GITHUB_REF_NAME#?}" >> $GITHUB_ENV

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Download Linux Build
      uses: actions/download-artifact@v4
      with:
        name: drop
        path: drop

  build-do-image:
    name: Build DigitalOcean Image
    runs-on: ubuntu-latest
    needs: [release]

    steps:
    - uses: actions/checkout@v4

    - name: Set Version Variables
      run: |
        echo "Using TAG mode: $GITHUB_REF_NAME"
        echo "REL_VERSION_STRICT=${GITHUB_REF_NAME#?}" >> $GITHUB_ENV

    - name: Install Packer
      run: |
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update && sudo apt-get install packer

    - name: Build Droplet Image
      env:
        DIGITALOCEAN_API_TOKEN: ${{ secrets.DO_TOKEN }}
        WIKI_APP_VERSION: ${{ env.REL_VERSION_STRICT }}
      working-directory: dev/packer
      run: |
        packer build digitalocean.json
