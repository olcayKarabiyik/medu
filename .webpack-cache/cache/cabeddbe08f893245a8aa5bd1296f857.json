{"remainingRequest":"/wiki/node_modules/babel-loader/lib/index.js??ref--0-1!/wiki/node_modules/vuetify/lib/components/VItemGroup/VItemGroup.js","dependencies":[{"path":"/wiki/node_modules/vuetify/lib/components/VItemGroup/VItemGroup.js","mtime":1716088148801},{"path":"/wiki/node_modules/cache-loader/dist/cjs.js","mtime":1716088090639},{"path":"/wiki/node_modules/babel-loader/lib/index.js","mtime":1716088089693}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8gU3R5bGVzCmltcG9ydCAiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVkl0ZW1Hcm91cC9WSXRlbUdyb3VwLnNhc3MiOwppbXBvcnQgUHJveHlhYmxlIGZyb20gJy4uLy4uL21peGlucy9wcm94eWFibGUnOwppbXBvcnQgVGhlbWVhYmxlIGZyb20gJy4uLy4uL21peGlucy90aGVtZWFibGUnOyAvLyBVdGlsaXRpZXMKCmltcG9ydCBtaXhpbnMgZnJvbSAnLi4vLi4vdXRpbC9taXhpbnMnOwppbXBvcnQgeyBjb25zb2xlV2FybiB9IGZyb20gJy4uLy4uL3V0aWwvY29uc29sZSc7CmV4cG9ydCBjb25zdCBCYXNlSXRlbUdyb3VwID0gbWl4aW5zKFByb3h5YWJsZSwgVGhlbWVhYmxlKS5leHRlbmQoewogIG5hbWU6ICdiYXNlLWl0ZW0tZ3JvdXAnLAogIHByb3BzOiB7CiAgICBhY3RpdmVDbGFzczogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICd2LWl0ZW0tLWFjdGl2ZScKICAgIH0sCiAgICBtYW5kYXRvcnk6IEJvb2xlYW4sCiAgICBtYXg6IHsKICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSwKICAgICAgZGVmYXVsdDogbnVsbAogICAgfSwKICAgIG11bHRpcGxlOiBCb29sZWFuCiAgfSwKCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIC8vIEFzIGxvbmcgYXMgYSB2YWx1ZSBpcyBkZWZpbmVkLCBzaG93IGl0CiAgICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgaWYgbXVsdGlwbGUKICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoaWNoIGRlZmF1bHQgdG8gcHJvdmlkZQogICAgICBpbnRlcm5hbExhenlWYWx1ZTogdGhpcy52YWx1ZSAhPT0gdW5kZWZpbmVkID8gdGhpcy52YWx1ZSA6IHRoaXMubXVsdGlwbGUgPyBbXSA6IHVuZGVmaW5lZCwKICAgICAgaXRlbXM6IFtdCiAgICB9OwogIH0sCgogIGNvbXB1dGVkOiB7CiAgICBjbGFzc2VzKCkgewogICAgICByZXR1cm4gewogICAgICAgICd2LWl0ZW0tZ3JvdXAnOiB0cnVlLAogICAgICAgIC4uLnRoaXMudGhlbWVDbGFzc2VzCiAgICAgIH07CiAgICB9LAoKICAgIHNlbGVjdGVkSW5kZXgoKSB7CiAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkSXRlbSAmJiB0aGlzLml0ZW1zLmluZGV4T2YodGhpcy5zZWxlY3RlZEl0ZW0pIHx8IC0xOwogICAgfSwKCiAgICBzZWxlY3RlZEl0ZW0oKSB7CiAgICAgIGlmICh0aGlzLm11bHRpcGxlKSByZXR1cm4gdW5kZWZpbmVkOwogICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZEl0ZW1zWzBdOwogICAgfSwKCiAgICBzZWxlY3RlZEl0ZW1zKCkgewogICAgICByZXR1cm4gdGhpcy5pdGVtcy5maWx0ZXIoKGl0ZW0sIGluZGV4KSA9PiB7CiAgICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlTWV0aG9kKHRoaXMuZ2V0VmFsdWUoaXRlbSwgaW5kZXgpKTsKICAgICAgfSk7CiAgICB9LAoKICAgIHNlbGVjdGVkVmFsdWVzKCkgewogICAgICBpZiAodGhpcy5pbnRlcm5hbFZhbHVlID09IG51bGwpIHJldHVybiBbXTsKICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodGhpcy5pbnRlcm5hbFZhbHVlKSA/IHRoaXMuaW50ZXJuYWxWYWx1ZSA6IFt0aGlzLmludGVybmFsVmFsdWVdOwogICAgfSwKCiAgICB0b2dnbGVNZXRob2QoKSB7CiAgICAgIGlmICghdGhpcy5tdWx0aXBsZSkgewogICAgICAgIHJldHVybiB2ID0+IHRoaXMuaW50ZXJuYWxWYWx1ZSA9PT0gdjsKICAgICAgfQoKICAgICAgY29uc3QgaW50ZXJuYWxWYWx1ZSA9IHRoaXMuaW50ZXJuYWxWYWx1ZTsKCiAgICAgIGlmIChBcnJheS5pc0FycmF5KGludGVybmFsVmFsdWUpKSB7CiAgICAgICAgcmV0dXJuIHYgPT4gaW50ZXJuYWxWYWx1ZS5pbmNsdWRlcyh2KTsKICAgICAgfQoKICAgICAgcmV0dXJuICgpID0+IGZhbHNlOwogICAgfQoKICB9LAogIHdhdGNoOiB7CiAgICBpbnRlcm5hbFZhbHVlOiAndXBkYXRlSXRlbXNTdGF0ZScsCiAgICBpdGVtczogJ3VwZGF0ZUl0ZW1zU3RhdGUnCiAgfSwKCiAgY3JlYXRlZCgpIHsKICAgIGlmICh0aGlzLm11bHRpcGxlICYmICFBcnJheS5pc0FycmF5KHRoaXMuaW50ZXJuYWxWYWx1ZSkpIHsKICAgICAgY29uc29sZVdhcm4oJ01vZGVsIG11c3QgYmUgYm91bmQgdG8gYW4gYXJyYXkgaWYgdGhlIG11bHRpcGxlIHByb3BlcnR5IGlzIHRydWUuJywgdGhpcyk7CiAgICB9CiAgfSwKCiAgbWV0aG9kczogewogICAgZ2VuRGF0YSgpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBjbGFzczogdGhpcy5jbGFzc2VzCiAgICAgIH07CiAgICB9LAoKICAgIGdldFZhbHVlKGl0ZW0sIGkpIHsKICAgICAgcmV0dXJuIGl0ZW0udmFsdWUgPT0gbnVsbCB8fCBpdGVtLnZhbHVlID09PSAnJyA/IGkgOiBpdGVtLnZhbHVlOwogICAgfSwKCiAgICBvbkNsaWNrKGl0ZW0pIHsKICAgICAgdGhpcy51cGRhdGVJbnRlcm5hbFZhbHVlKHRoaXMuZ2V0VmFsdWUoaXRlbSwgdGhpcy5pdGVtcy5pbmRleE9mKGl0ZW0pKSk7CiAgICB9LAoKICAgIHJlZ2lzdGVyKGl0ZW0pIHsKICAgICAgY29uc3QgaW5kZXggPSB0aGlzLml0ZW1zLnB1c2goaXRlbSkgLSAxOwogICAgICBpdGVtLiRvbignY2hhbmdlJywgKCkgPT4gdGhpcy5vbkNsaWNrKGl0ZW0pKTsgLy8gSWYgbm8gdmFsdWUgcHJvdmlkZWQgYW5kIG1hbmRhdG9yeSwKICAgICAgLy8gYXNzaWduIGZpcnN0IHJlZ2lzdGVyZWQgaXRlbQoKICAgICAgaWYgKHRoaXMubWFuZGF0b3J5ICYmICF0aGlzLnNlbGVjdGVkVmFsdWVzLmxlbmd0aCkgewogICAgICAgIHRoaXMudXBkYXRlTWFuZGF0b3J5KCk7CiAgICAgIH0KCiAgICAgIHRoaXMudXBkYXRlSXRlbShpdGVtLCBpbmRleCk7CiAgICB9LAoKICAgIHVucmVnaXN0ZXIoaXRlbSkgewogICAgICBpZiAodGhpcy5faXNEZXN0cm95ZWQpIHJldHVybjsKICAgICAgY29uc3QgaW5kZXggPSB0aGlzLml0ZW1zLmluZGV4T2YoaXRlbSk7CiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRWYWx1ZShpdGVtLCBpbmRleCk7CiAgICAgIHRoaXMuaXRlbXMuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgY29uc3QgdmFsdWVJbmRleCA9IHRoaXMuc2VsZWN0ZWRWYWx1ZXMuaW5kZXhPZih2YWx1ZSk7IC8vIEl0ZW1zIGlzIG5vdCBzZWxlY3RlZCwgZG8gbm90aGluZwoKICAgICAgaWYgKHZhbHVlSW5kZXggPCAwKSByZXR1cm47IC8vIElmIG5vdCBtYW5kYXRvcnksIHVzZSByZWd1bGFyIHVwZGF0ZSBwcm9jZXNzCgogICAgICBpZiAoIXRoaXMubWFuZGF0b3J5KSB7CiAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlSW50ZXJuYWxWYWx1ZSh2YWx1ZSk7CiAgICAgIH0gLy8gUmVtb3ZlIHRoZSB2YWx1ZQoKCiAgICAgIGlmICh0aGlzLm11bHRpcGxlICYmIEFycmF5LmlzQXJyYXkodGhpcy5pbnRlcm5hbFZhbHVlKSkgewogICAgICAgIHRoaXMuaW50ZXJuYWxWYWx1ZSA9IHRoaXMuaW50ZXJuYWxWYWx1ZS5maWx0ZXIodiA9PiB2ICE9PSB2YWx1ZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkOwogICAgICB9IC8vIElmIG1hbmRhdG9yeSBhbmQgd2UgaGF2ZSBubyBzZWxlY3Rpb24KICAgICAgLy8gYWRkIHRoZSBsYXN0IGl0ZW0gYXMgdmFsdWUKCiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovCgoKICAgICAgaWYgKCF0aGlzLnNlbGVjdGVkSXRlbXMubGVuZ3RoKSB7CiAgICAgICAgdGhpcy51cGRhdGVNYW5kYXRvcnkodHJ1ZSk7CiAgICAgIH0KICAgIH0sCgogICAgdXBkYXRlSXRlbShpdGVtLCBpbmRleCkgewogICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWUoaXRlbSwgaW5kZXgpOwogICAgICBpdGVtLmlzQWN0aXZlID0gdGhpcy50b2dnbGVNZXRob2QodmFsdWUpOwogICAgfSwKCiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVldGlmeWpzL3Z1ZXRpZnkvaXNzdWVzLzUzNTIKICAgIHVwZGF0ZUl0ZW1zU3RhdGUoKSB7CiAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsKICAgICAgICBpZiAodGhpcy5tYW5kYXRvcnkgJiYgIXRoaXMuc2VsZWN0ZWRJdGVtcy5sZW5ndGgpIHsKICAgICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZU1hbmRhdG9yeSgpOwogICAgICAgIH0gLy8gVE9ETzogTWFrZSB0aGlzIHNtYXJ0ZXIgc28gaXQKICAgICAgICAvLyBkb2Vzbid0IGhhdmUgdG8gaXRlcmF0ZSBldmVyeQogICAgICAgIC8vIGNoaWxkIGluIGFuIHVwZGF0ZQoKCiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKHRoaXMudXBkYXRlSXRlbSk7CiAgICAgIH0pOwogICAgfSwKCiAgICB1cGRhdGVJbnRlcm5hbFZhbHVlKHZhbHVlKSB7CiAgICAgIHRoaXMubXVsdGlwbGUgPyB0aGlzLnVwZGF0ZU11bHRpcGxlKHZhbHVlKSA6IHRoaXMudXBkYXRlU2luZ2xlKHZhbHVlKTsKICAgIH0sCgogICAgdXBkYXRlTWFuZGF0b3J5KGxhc3QpIHsKICAgICAgaWYgKCF0aGlzLml0ZW1zLmxlbmd0aCkgcmV0dXJuOwogICAgICBjb25zdCBpdGVtcyA9IHRoaXMuaXRlbXMuc2xpY2UoKTsKICAgICAgaWYgKGxhc3QpIGl0ZW1zLnJldmVyc2UoKTsKICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zLmZpbmQoaXRlbSA9PiAhaXRlbS5kaXNhYmxlZCk7IC8vIElmIG5vIHRhYnMgYXJlIGF2YWlsYWJsZQogICAgICAvLyBhYm9ydHMgbWFuZGF0b3J5IHZhbHVlCgogICAgICBpZiAoIWl0ZW0pIHJldHVybjsKICAgICAgY29uc3QgaW5kZXggPSB0aGlzLml0ZW1zLmluZGV4T2YoaXRlbSk7CiAgICAgIHRoaXMudXBkYXRlSW50ZXJuYWxWYWx1ZSh0aGlzLmdldFZhbHVlKGl0ZW0sIGluZGV4KSk7CiAgICB9LAoKICAgIHVwZGF0ZU11bHRpcGxlKHZhbHVlKSB7CiAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IEFycmF5LmlzQXJyYXkodGhpcy5pbnRlcm5hbFZhbHVlKSA/IHRoaXMuaW50ZXJuYWxWYWx1ZSA6IFtdOwogICAgICBjb25zdCBpbnRlcm5hbFZhbHVlID0gZGVmYXVsdFZhbHVlLnNsaWNlKCk7CiAgICAgIGNvbnN0IGluZGV4ID0gaW50ZXJuYWxWYWx1ZS5maW5kSW5kZXgodmFsID0+IHZhbCA9PT0gdmFsdWUpOwogICAgICBpZiAodGhpcy5tYW5kYXRvcnkgJiYgLy8gSXRlbSBhbHJlYWR5IGV4aXN0cwogICAgICBpbmRleCA+IC0xICYmIC8vIHZhbHVlIHdvdWxkIGJlIHJlZHVjZWQgYmVsb3cgbWluCiAgICAgIGludGVybmFsVmFsdWUubGVuZ3RoIC0gMSA8IDEpIHJldHVybjsKICAgICAgaWYgKCAvLyBNYXggaXMgc2V0CiAgICAgIHRoaXMubWF4ICE9IG51bGwgJiYgLy8gSXRlbSBkb2Vzbid0IGV4aXN0CiAgICAgIGluZGV4IDwgMCAmJiAvLyB2YWx1ZSB3b3VsZCBiZSBpbmNyZWFzZWQgYWJvdmUgbWF4CiAgICAgIGludGVybmFsVmFsdWUubGVuZ3RoICsgMSA+IHRoaXMubWF4KSByZXR1cm47CiAgICAgIGluZGV4ID4gLTEgPyBpbnRlcm5hbFZhbHVlLnNwbGljZShpbmRleCwgMSkgOiBpbnRlcm5hbFZhbHVlLnB1c2godmFsdWUpOwogICAgICB0aGlzLmludGVybmFsVmFsdWUgPSBpbnRlcm5hbFZhbHVlOwogICAgfSwKCiAgICB1cGRhdGVTaW5nbGUodmFsdWUpIHsKICAgICAgY29uc3QgaXNTYW1lID0gdmFsdWUgPT09IHRoaXMuaW50ZXJuYWxWYWx1ZTsKICAgICAgaWYgKHRoaXMubWFuZGF0b3J5ICYmIGlzU2FtZSkgcmV0dXJuOwogICAgICB0aGlzLmludGVybmFsVmFsdWUgPSBpc1NhbWUgPyB1bmRlZmluZWQgOiB2YWx1ZTsKICAgIH0KCiAgfSwKCiAgcmVuZGVyKGgpIHsKICAgIHJldHVybiBoKCdkaXYnLCB0aGlzLmdlbkRhdGEoKSwgdGhpcy4kc2xvdHMuZGVmYXVsdCk7CiAgfQoKfSk7CmV4cG9ydCBkZWZhdWx0IEJhc2VJdGVtR3JvdXAuZXh0ZW5kKHsKICBuYW1lOiAndi1pdGVtLWdyb3VwJywKCiAgcHJvdmlkZSgpIHsKICAgIHJldHVybiB7CiAgICAgIGl0ZW1Hcm91cDogdGhpcwogICAgfTsKICB9Cgp9KTs="},null]}