{"remainingRequest":"/wiki/node_modules/babel-loader/lib/index.js??ref--0-1!/wiki/node_modules/webpack-modernizr-loader/index.js!/wiki/client/.modernizrrc.js","dependencies":[{"path":"/wiki/client/.modernizrrc.js","mtime":1716084843839},{"path":"/wiki/.babelrc","mtime":1716084843827},{"path":"/wiki/node_modules/cache-loader/dist/cjs.js","mtime":1716088090639},{"path":"/wiki/node_modules/babel-loader/lib/index.js","mtime":1716088089693},{"path":"/wiki/node_modules/webpack-modernizr-loader/index.js","mtime":1716088158525}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}