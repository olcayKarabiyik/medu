{"remainingRequest":"/wiki/node_modules/babel-loader/lib/index.js??ref--0-1!/wiki/node_modules/vuetify/lib/components/VCalendar/mixins/calendar-with-events.js","dependencies":[{"path":"/wiki/node_modules/vuetify/lib/components/VCalendar/mixins/calendar-with-events.js","mtime":1716088148801},{"path":"/wiki/node_modules/cache-loader/dist/cjs.js","mtime":1716088090639},{"path":"/wiki/node_modules/babel-loader/lib/index.js","mtime":1716088089693}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}