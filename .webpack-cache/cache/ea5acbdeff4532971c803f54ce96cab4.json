{"remainingRequest":"/wiki/node_modules/babel-loader/lib/index.js??ref--0-1!/wiki/node_modules/vue-loader/lib/index.js??vue-loader-options!/wiki/client/components/admin/admin-pages-visualize.vue?vue&type=script&lang=js&","dependencies":[{"path":"/wiki/client/components/admin/admin-pages-visualize.vue","mtime":1716084843853},{"path":"/wiki/.babelrc","mtime":1716084843827},{"path":"/wiki/node_modules/cache-loader/dist/cjs.js","mtime":1716088090639},{"path":"/wiki/node_modules/babel-loader/lib/index.js","mtime":1716088089693},{"path":"/wiki/node_modules/vue-loader/lib/index.js","mtime":1716088146939}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}